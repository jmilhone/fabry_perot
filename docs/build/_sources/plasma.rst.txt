Plasma
=========

Plasma Module
----------------

.. automodule:: fabry.plasma.plasma
    :members:


Argon Plasma Solver Module
------------------------------

.. py:currentmodule:: fabry.plasma.argon_plasma_solver.py

This module contains a few different MultiNest plasma solvers.

.. attribute:: w0

    wavelength for the Ar II ion line

.. attribute:: mu

    mass of argon in amu

.. function:: no_vel_solver(output_folder, Fpost, Lpost, dpost, resume=True, test_plot=False)

    MultiNest solver for argon with no velocity shift

    :param str output_folder: path to folder for input and output folders
    :param np.ndarray Fpost: posterior results for the finesse
    :param np.ndarray Lpost: posterior results for the camera focal length
    :param np.ndarray dpost: posterior results for the etalon spacing
    :param bool resume: resume calculation if True, default=True
    :param bool test_plot: make a test plot of prior intstead of solving, default=False

.. function:: const_vel_solver(output_folder, Fpost, Lpost, dpost, resume=True, test_plot=False)

    MultiNest solver for argon with a constant velocity shift

    :param str output_folder: path to folder for input and output folders
    :param np.ndarray Fpost: posterior results for the finesse
    :param np.ndarray Lpost: posterior results for the camera focal length
    :param np.ndarray dpost: posterior results for the etalon spacing
    :param bool resume: resume calculation if True, default=True
    :param bool test_plot: make a test plot of prior intstead of solving, default=False

.. function:: profile_vel_solver(output_folder, Fpost, Lpost, dpost, resume=True, test_plot=False)

    MultiNest solver for argon with a PCX-U torodial velocity with only outer drive

    :param str output_folder: path to folder for input and output folders
    :param np.ndarray Fpost: posterior results for the finesse
    :param np.ndarray Lpost: posterior results for the camera focal length
    :param np.ndarray dpost: posterior results for the etalon spacing
    :param bool resume: resume calculation if True, default=True
    :param bool test_plot: make a test plot of prior intstead of solving, default=False



Argon Chord Solver Module
------------------------------

.. py:currentmodule:: fabry.plasma.argon_chord_solver.py

This module contains a chord solver for VFD argon plasmas on PCX

.. attribute:: w0

    wavelength for the Ar II ion line

.. attribute:: mu

    mass of argon in amu

.. function:: pcx_vfd_model(r, b, Ti_params, V_params, ne_params, delta_d, amp, L, d, F, rmax=40.0)

    Simple wrapper for modeling chords on PCX for VFD experiments

    :param np.ndarray r: array of pixel radius locations
    :param float b: impact factor
    :param List Ti_params: List containing args for Ti profile
    :param List V_params: List containing args for V profile
    :param List ne_params: List containing args for ne profile
    :param float delta_d: change in etalon spacing in mm
    :param float amp: amplitude
    :param float L: focal length in pixels
    :param float d: etalon spacing in mm
    :param float F: etalon finesse
    :param float rmax: max radius in the plasma to model

.. function:: calculate_delta_d(velocity_offset):

    Calculates delta d (in mm) for a velocity offset (m/s)

    :param float velocity_offset: offset velocity in n/s
    :return: delta d in mm
    :rtype: float


.. function:: prior(cube, ndim, nparams):

    Transforms prior hypercube to physical units

    :param List cube: hypercube to transform to physical units
    :param ndim: Not used, MultiNest asks for it
    :param int nparams: number of parameters, can be bigger than cube dimension I believe

.. function:: argon_multi_image_solver_fixed_Lnu(output_folder, calib_posterior, image_data, resume=True, test_plot=False):

    Runs MultiNest solver for multiple chords in a PCX Ar plasma with a fixed Lnu.

    :param str output_folder: output folder to store multinest files
    :param np.ndarray calib_posterior: calibration equally weighted posterior samples
    :param tuple image_data: Tuple containing (r, sig, std, impact_factor) for the images to be analyzed
    :param bool resume: Resume multinest solver if True, default=True
    :param bool test_plot: Runs test plot sampling from prior instead of running solver, default=False


Check Argon Chord Solver Module
----------------------------------

.. py:currentmodule:: fabry.plasma.check_argon_chord_solver.py

This module contains functions for checking the validity of the argon_chord_solver

.. attribute:: w0

    wavelength for the Ar II ion line

.. attribute:: mu

    mass of argon in amu

.. function:: check_const_Lnu_solver(output_folder, calib_posterior, image_data, n_samples=200):

    Creates many plots to check validity of chord solver

    :param str output_folder: output folder where MultiNest files are stored
    :param np.ndarray calib_posterior: calibration posterior
    :param Tuple image_data: Tuple containing r, signal, signal error, and impact factor for the image data
    :param int n_samples: number of posterior samples to use for fit plotting

.. function:: joint_marginal_plot(xpost, ypost, xlabel, ylabel, savefig=False, fname=None, block=False):

    Plot joint marginal distribution with marginals for x and y posteriors

    :param np.ndarray xpost: posterior values for the x axis
    :param np.ndarray ypost: posterior values for the y axis
    :param str xlabel: x axis label
    :param str ylabel: y axis label
    :param bool savefig: True if the figure should be saved
    :param str fname: filename to save figure to
    :param bool block: block script while showing figure. User must close figure to continue
    :return: Tuple with figure and axes
    :rtype: Tuple

.. function:: marginal_plot(posterior, xlabel, ylabel, savefig=False, fname=None, block=False):

    Create a marginal posterior plot for posterior

    :param np.ndarray posterior: posterior to plot
    :param str xlabel: x axis label
    :param str ylabel: y axis label
    :param bool savefig: True if the figure should be saved
    :param str fname: filename to save figure to
    :param bool block: block script while showing figure. User must close figure to continue.
    :return: Tuple containing figure and axes
    :rtype: Tuple

.. function:: calculate_multi_models(r, impact_factors, vel_offsets, L, d, F, Lnu, cube, nlambda=2000, nr=101, rmax=40.0, r_anode=32.0):

    Calculates forward models for the given parameters

    :param List r: List containing r arrays for each image
    :param List impact_factors: List containing impact factors for each image
    :param List vel_offsets: velocity offsets to account for etalon variation in time
    :param float L: camera focal length in pixels
    :param float d: etalon spacing in mm
    :param float F: etalon finesse
    :param float Lnu: momentum diffusion length
    :param list cube: posterior samples for each parameter
    :param int nlambda: number of wavelengths to calculate with
    :param int nr: number of radial points to model chord with
    :param float rmax: edge of the plasma
    :param float r_anode: radius location of the anode tip
    :return: List of values for each chord location
    :rtype: List

.. function:: calculate_percentile_ranges(data, levels):

    Calculates the percentage ranges that include the level around the mean. Generally used for finding 1 sigma, 2 sigma, and 3 sigma assuming Gaussian distribution.

    :param np.ndarray data: data to calculate percentile ranges
    :param List levels: List of levesl to calcualte ranges on. Should be in % and be between 0 and 100
    :return: dictionary with keys being the levels
    :rtype: dict